Point 1. Your main python file name should be application.py
Point 2. Your flask object name, which we have defined in application.py should also be the application.
Point 3. .ebignore  is responsible to hold the name of those files which we don't want to push on a cloud.
Point 4. Create a requirements.txt file.
        Command : pip freeze > requirements.txt
Point 5. Create a folder called .ebextensions
Point 6. Inside .ebextensions we need a python.config file.
Point 7. Mention the commands in python.config
            option_settings:
              "aws:elasticbeanstalk:container:python":
                WSGIPath: application:application



 SUMMARY(AWS):-
 1).Create an AWS account.
 2).Make your application ready:-
      Point 1. Your main python file name should be application.py
      Point 2. Your flask object name, which we have defined in application.py should also be the application.
      Point 3. .ebignore  is responsible to hold the name of those files which we don't want to push on a cloud.
      Point 4. Create a requirements.txt file.
        Command : pip freeze > requirements.txt
      Point 5. Create a folder called .ebextensions
      Point 6. Inside .ebextensions we need a python.config file.
      Point 7. Mention the commands in python.config
            option_settings:
              "aws:elasticbeanstalk:container:python":
                WSGIPath: application:application


SUMMARY(GCP):
    1).Go to GCP and create a new project
    2).Create a new file(configuration) named as app.yaml and put the below content inside this newly created
    file:-
           runtime: python
           env: flex
           entrypoint: gunicorn -b :$PORT main:application

           runtime_config:
                   python_version: 3

           manual_scaling:
                   instances: 1
           resources:
                   cpu: 1
                   memory_gb: 0.5
                   disk_size_gb: 10

    3).Initialize the local git using git init
    4).Then git add .
    5).git commit -m "any message"
    6).Go to your githiub.com and create a new repo and name it anything
    7).Push our local code to our github repo
        git push github_repo_url branch_name
        (eg. branch name could be master , main, etc)
    8).Go to your GCP
    9).Click on activate cloud shell which is on the top right corner of the gcp
    9).Once the shell is activated go to your cloud shell and clone your github app which we have pushed at step 7
       using command git clone repo_url
    10).On the cloud shell itself get into/navigate the project folder using cd project_folder_name
    11).Now connect the cloned app to project which we have created in step 1 using gcloud config set project project_id
    12).Execute the below command :
               gcloud app deploy
